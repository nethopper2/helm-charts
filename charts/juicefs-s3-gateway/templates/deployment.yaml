apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "juicefs-s3-gateway.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "juicefs-s3-gateway.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "juicefs-s3-gateway.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "juicefs-s3-gateway.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "juicefs-s3-gateway.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: format
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          {{- if .Values.image.pullPolicy }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command:
            - sh
            - -c
            {{- if .Values.secret.config.token }}
            - juicefs auth ${name} --token=${token} {{ if .Values.secret.config.bucket }}--bucket=${bucket}{{ end }}
            {{- else }}
            - juicefs format ${metaurl} ${name} --storage=${storage} --bucket=${bucket} ${format_options}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "juicefs-s3-gateway.secretName" . }}
            {{- if .Values.configMap.create }}
            - configMapRef:
                name: {{ include "juicefs-s3-gateway.configMapName" . }}
            {{- end }}
          env:
            - name: name
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: name
            - name: bucket
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: bucket
            {{- if .Values.configMap.create }}
            - name: format_options
              valueFrom:
                configMapKeyRef:
                  name: {{ include "juicefs-s3-gateway.configMapName" . }}
                  key: format-options
            {{- end }}
            {{- if .Values.secret.config.token }}
            - name: token
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: token
            {{- else }}
            - name: metaurl
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: metaurl
            - name: storage
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: storage
            {{- end }}
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-password
            {{- if .Values.secret.config.rsaPassphrase }}
            - name: JFS_RSA_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: rsa-passphrase
            {{- end }}
            {{- if eq .Values.secret.config.storage "gs" }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
            {{- end }}
            {{- if contains "postgres" .Values.secret.config.metaurl }}
            - name: META_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.adminPasswordKey }}
            {{- end }}
            {{- if .Values.initEnvs }}
            {{- toYaml .Values.initEnvs | nindent 12 }}
            {{- end }}
          volumeMounts:
            {{- if .Values.secret.config.token }}
            - mountPath: /root/.juicefs
              name: jfs-root-dir
            {{- end }}
            {{- if .Values.secret.config.rsaKey }}
            - name: rsa-key
              mountPath: "/root"
              readOnly: true
            {{- end }}
            {{- if and (eq .Values.secret.config.storage "gs") .Values.secret.config.credentialsSecret }}
            - name: object-storage-credentials
              mountPath: /var/secrets/google
              readOnly: true
            {{- end }}
            {{- if and (eq .Values.secret.config.storage "s3") .Values.secret.config.credentialsSecret }}
            - name: object-storage-credentials
              mountPath: /root/.aws
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      containers:
        - name: gateway
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          {{- if .Values.image.pullPolicy }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command:
            - sh
            - -c
            {{- if .Values.secret.config.token }}
            - juicefs gateway ${name} 0.0.0.0:{{ .Values.port }} ${gateway_options} {{ if .Values.secret.config.rsaKey }}--rsa-key /root/rsa-key.pem{{ end }}
            {{- else }}
            - juicefs gateway ${metaurl} 0.0.0.0:{{ .Values.port }} --metrics=0.0.0.0:{{ .Values.metricsPort }} ${gateway_options} {{ if .Values.secret.config.rsaKey }}--rsa-key /root/rsa-key.pem{{ end }}
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "juicefs-s3-gateway.secretName" . }}
            {{- if .Values.configMap.create }}
            - configMapRef:
                name: {{ include "juicefs-s3-gateway.configMapName" . }}
            {{- end }}
          env:
            - name: name
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: name
            {{- if .Values.configMap.create }}
            - name: gateway_options
              valueFrom:
                configMapKeyRef:
                  name: {{ include "juicefs-s3-gateway.configMapName" . }}
                  key: gateway-options
            {{- end }}
            {{- if .Values.secret.config.token }}
            - name: token
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: token
            {{- else }}
            - name: metaurl
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: metaurl
            {{- end }}
            - name: MINIO_NOTIFY_WEBHOOK_ENABLE_1
              value: "on"
            - name: MINIO_NOTIFY_WEBHOOK_ENDPOINT_1
              valueFrom:
                configMapKeyRef:
                  name: {{ include "juicefs-s3-gateway.configMapName" . }}
                  key: webhook-endpoint
            {{- if .Values.persistence.enabled }}
            - name: MINIO_NOTIFY_WEBHOOK_QUEUE_DIR_1
              value: "/messages"
            {{- end }}
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-password
            {{- if .Values.secret.config.rsaPassphrase }}
            - name: JFS_RSA_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: rsa-passphrase
            {{- end }}
            {{- if eq .Values.secret.config.storage "gs" }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
            {{- end }}
            {{- if contains "postgres" .Values.secret.config.metaurl }}
            - name: META_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.adminPasswordKey }}
            {{- end }}
            {{- if .Values.envs }}
            {{- toYaml .Values.envs | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
              protocol: TCP
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: minio-config
              mountPath: /nonexistent
            {{- if .Values.persistence.enabled }}
            - name: messages
              mountPath: /messages
            {{- end }}
            {{- if .Values.secret.config.token }}
            - mountPath: /root/.juicefs
              name: jfs-root-dir
            {{- end }}
            {{- if .Values.secret.config.rsaKey }}
            - name: rsa-key
              mountPath: "/root"
              readOnly: true
            {{- end }}
            {{- if and (eq .Values.secret.config.storage "gs" ) .Values.secret.config.credentialsSecret }}
            - name: object-storage-credentials
              mountPath: /var/secrets/google
              readOnly: true
            {{- end }}
            {{- if and (eq .Values.secret.config.storage "s3") .Values.secret.config.credentialsSecret }}
            - name: object-storage-credentials
              mountPath: /root/.aws
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecar.enabled }}
        - name: gateway-config
          image: {{ .Values.sidecar.image.repository }}:{{ .Values.sidecar.image.tag }}
          imagePullPolicy: {{ .Values.sidecar.image.pullPolicy }}
          env:
            - name: GATEWAY_ENDPOINT
              value: "http://localhost:{{ .Values.port }}"
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-user
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: minio-root-password
            - name: BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "juicefs-s3-gateway.secretName" . }}
                  key: name
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for JuiceFS S3 Gateway to be ready..."

              # Wait for gateway to be ready (max 5 minutes)
              TIMEOUT=300
              ELAPSED=0
              INTERVAL=5

              while [ $ELAPSED -lt $TIMEOUT ]; do
                if mc --config-dir /tmp/.mc alias set jfs ${GATEWAY_ENDPOINT} ${ACCESS_KEY} ${SECRET_KEY} 2>/dev/null; then
                  echo "Gateway is ready!"
                  break
                fi
                echo "Gateway not ready yet, waiting ${INTERVAL}s... (${ELAPSED}/${TIMEOUT}s elapsed)"
                sleep ${INTERVAL}
                ELAPSED=$((ELAPSED + INTERVAL))
              done

              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "ERROR: Gateway did not become ready within ${TIMEOUT} seconds"
                exit 1
              fi

              echo "Starting JuiceFS S3 Gateway configuration..."
              {{- range .Values.sidecar.mcCommands }}
              echo "Executing: {{ . }}"
              {{ . }}
              {{- end }}
              echo "Configuration completed successfully!"

              # Keep container running if configured (useful for debugging)
              {{- if .Values.sidecar.keepRunning }}
              echo "Sidecar configured to keep running. Sleeping indefinitely..."
              while true; do sleep 3600; done
              {{- else }}
              echo "Sidecar exiting successfully."
              exit 0
              {{- end }}
          resources:
            {{- toYaml .Values.sidecar.resources | nindent 12 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      {{- end }}
      volumes:
        - name: minio-config
          emptyDir: {}
        {{- if .Values.persistence.enabled }}
        - name: messages
          persistentVolumeClaim:
            claimName: {{ include "juicefs-s3-gateway.fullname" . }}-messages
        {{- end }}
        {{- if .Values.secret.config.credentialsSecret }}
        - name: object-storage-credentials
          secret:
            secretName: {{ .Values.secret.config.credentialsSecret }}
        {{- end }}
        {{- if .Values.secret.config.token }}
        - emptyDir: {}
          name: jfs-root-dir
        {{- end }}
        {{- if .Values.secret.config.rsaKey }}
        - name: rsa-key
          secret:
            secretName: {{ include "juicefs-s3-gateway.secretName" . }}
            items:
              - key: rsa-key
                path: rsa-key.pem
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}